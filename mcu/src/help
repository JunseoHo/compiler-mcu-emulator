NAME
    MCU Emulator for 2023-1 System Programming Midterm Assignment

DESCRIPTION
    Author       : Junseo Ho
    Organization : Myongji University
    Modified     : 2023-04-16

    This program emulates the operation of a simple CPU.
    The instruction is based on 32 bits, and from the front, 2 bits represent the addressing mode,
    4 bits represent the opcode, and 26 bits represent the operand.

OPTIONS
    -help
        Print this help document
    -p
        Print executed instructions
    -d
        Execute one instruction each time input is received from standard input

ADDRESSING_MODE
    Bin     Hex     Description
    ----------------------------
    00      0x00    immediate
    01      0x01    direct
    11      0x10    indirect

OPCODE
    Bin     Hex     Mnemonic    Description
    --------------------------------------------------------------------------------------------------
    0000    0x00    hlt         terminate program
    0001    0x01    prt         print operand to standard output
    0010    0x02    sto         move value from AC to operand
    0011    0x03    lda         move value from operand to AC
    0100    0x04    add         add the operand to AC, store the result value in AC
    0101    0x05    sub         subtract the operand from AC, store the result value in AC
    0110    0x06    mul         multiply the operand by AC, store the result value in AC
    0111    0x07    div         divide AC by the operand, store the quotient value in AC
    1000    0x08    jmp         store operand in PC
    1001    0x09    jpz         if zero flag is true, store operand in PC
    1010    0x0A    jpn         if negative flag is true, store operand in PC
    1011    0x0B    jpp         if zero flag and negative flag are false, store operand in PC
    1100    0x0C    and         operate bitwise-and with AC and operand, store the result value in AC
    1101    0x0D    or          operate bitwise-or with AC and operand, store the result value in AC
    1110    0x0E    xor         operate bitwise-xor with AC and operand, store the result value in AC

